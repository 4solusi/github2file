# File: also-a-sveltekit-chatbot-main/src/app.d.ts
// See https://kit.svelte.dev/docs/types#app

import type { DefaultSession } from '@auth/core/types';

// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface Platform {}
	}
}

declare module '@auth/core/types' {
	interface Session extends DefaultSession {
		user: {
			id: string;
		} & DefaultSession['user'];
	}
}

export {};


# File: also-a-sveltekit-chatbot-main/src/hooks.server.ts
import { SvelteKitAuth } from '@auth/sveltekit';
import GitHub from '@auth/core/providers/github';
import { GITHUB_ID, GITHUB_SECRET } from '$env/static/private';

export const handle = SvelteKitAuth({
	providers: [
		// @ts-ignore
		GitHub({
			clientId: GITHUB_ID,
			clientSecret: GITHUB_SECRET
		})
	],
	callbacks: {
		async jwt({ token, profile }) {
			if (profile?.id) {
				token.id = `${profile.id}`;
				token.image = profile.picture;
			}
			return token;
		},
		async session({ session, token }) {
			if (session.user && typeof token.id === 'string') {
				session.user.id = token.id;
			}
			return session;
		}
	},
	pages: {
		signIn: '/sign-in'
	}
});


# File: also-a-sveltekit-chatbot-main/src/lib/chat.ts
import type { Chat } from '$lib/types';
import { kv } from '@vercel/kv';

export async function getChats(userId?: string | null) {
	if (!userId) {
		return [];
	}

	try {
		const pipeline = kv.pipeline();
		const chats: string[] = await kv.zrange(`user:chat:${userId}`, 0, -1, {
			rev: true
		});

		for (const chat of chats) {
			pipeline.hgetall(chat);
		}

		const results = await pipeline.exec();

		return results as Chat[];
	} catch (error) {
		return [];
	}
}

export async function getChat(id: string, userId: string) {
	const chat = await kv.hgetall<Chat>(`chat:${id}`);

	if (!chat || (userId && `${chat.userId}` !== userId)) {
		return null;
	}

	return chat;
}


# File: also-a-sveltekit-chatbot-main/src/lib/components/ButtonScrollToBottom.svelte
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { IconArrowDown } from '$lib/components/ui/icons';
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };

	let isAtBottom = false;
	function handleScroll() {
		isAtBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight;
	}
</script>

<svelte:window on:scroll={handleScroll} />

<Button
	variant="outline"
	size="icon"
	class={cn(
		'absolute right-4 top-1 z-10 bg-background transition-opacity duration-300 sm:right-8 md:top-2',
		isAtBottom ? 'opacity-0' : 'opacity-100',
		className
	)}
	on:click={() =>
		window.scrollTo({
			top: document.body.offsetHeight,
			behavior: 'smooth'
		})}
	{...$$restProps}
>
	<IconArrowDown />
	<span class="sr-only">Scroll to bottom</span>
</Button>


# File: also-a-sveltekit-chatbot-main/src/lib/components/Chat.svelte
<script lang="ts">
	import ChatList from '$lib/components/ChatList.svelte';
	import ChatPanel from '$lib/components/ChatPanel.svelte';
	import EmptyScreen from '$lib/components/EmptyScreen.svelte';
	import { cn } from '$lib/utils';
	import { useChat, type Message } from 'ai/svelte';

	// TODO: Save in local storage
	let previewToken: string | null = null;

	export let id: string | undefined = undefined;
	export let initialMessages: Message[] | undefined = undefined;
	let className: string | undefined | null = undefined;
	export { className as class };

	const { messages, append, reload, stop, isLoading, input } = useChat({
		initialMessages,
		id,
		body: {
			id,
			previewToken
		}
	});
</script>

<div class={cn('pb-[200px] pt-4 md:pt-10', className)}>
	{#if $messages.length}
		<ChatList {messages} />
	{:else}
		<EmptyScreen {input} />
	{/if}
</div>

<ChatPanel {id} {isLoading} {stop} {append} {reload} {messages} {input} />


# File: also-a-sveltekit-chatbot-main/src/lib/components/ChatList.svelte
<script lang="ts">
	import ChatMessage from '$lib/components/ChatMessage.svelte';
	import { Separator } from '$lib/components/ui/separator';
	import type { UseChatHelpers } from 'ai/svelte';

	export let messages: UseChatHelpers['messages'];
</script>

{#if $messages?.length}
	<div class="relative mx-auto max-w-2xl px-4">
		{#each $messages as message, index}
			<div>
				<ChatMessage {message} />
				{#if index < $messages.length - 1}
					<Separator class="my-4 md:my-8" />
				{/if}
			</div>
		{/each}
	</div>
{/if}


# File: also-a-sveltekit-chatbot-main/src/lib/components/ChatMessage.svelte
<script lang="ts">
	import ChatMessageActions from '$lib/components/ChatMessageActions.svelte';
	import { IconOpenAI, IconUser } from '$lib/components/ui/icons';
	import { cn } from '$lib/utils';
	import type { Message } from 'ai';

	export let message: Message;
</script>

<div class={cn('group relative mb-4 flex items-start md:-ml-12')} {...$$restProps}>
	<div
		class={cn(
			'flex h-8 w-8 shrink-0 select-none items-center justify-center rounded-md border shadow',
			message.role === 'user' ? 'bg-background' : 'bg-primary text-primary-foreground'
		)}
	>
		{#if message.role === 'user'}
			<IconUser />
		{:else}
			<IconOpenAI />
		{/if}
	</div>
	<div class="ml-4 flex-1 space-y-2 overflow-hidden px-1">
		{message.content}
	</div>
	<ChatMessageActions {message} />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ChatMessageActions.svelte
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { IconCheck, IconCopy } from '$lib/components/ui/icons';
	import { cn } from '$lib/utils';
	import type { Message } from 'ai';
	// @ts-ignore
	import CopyToClipboard from 'svelte-copy-to-clipboard';

	export let message: Message;

	let className: string | undefined | null = undefined;
	export { className as class };

	let isCopied = false;

	function handleCopied() {
		isCopied = true;
		setTimeout(() => {
			isCopied = false;
		}, 2000);
	}
</script>

<div
	class={cn(
		'flex items-center justify-end transition-opacity group-hover:opacity-100 md:absolute md:-right-10 md:-top-2 md:opacity-0',
		className
	)}
	{...$$restProps}
>
	<CopyToClipboard text={message.content} on:copy={handleCopied} let:copy>
		<Button variant="ghost" size="icon" on:click={copy}>
			{#if isCopied}
				<IconCheck />
			{:else}
				<IconCopy />
			{/if}
			<span class="sr-only">Copy message</span>
		</Button>
	</CopyToClipboard>
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ChatPanel.svelte
<script lang="ts">
	import ButtonScrollToBottom from '$lib/components/ButtonScrollToBottom.svelte';
	import { Button } from '$lib/components/ui/button';
	import { IconRefresh, IconStop } from '$lib/components/ui/icons';
	import type { UseChatHelpers } from 'ai/svelte';
	import FooterText from '$lib/components/FooterText.svelte';
	import PromptForm from '$lib/components/PromptForm.svelte';

	export let id: string | undefined = undefined;
	export let isLoading: UseChatHelpers['isLoading'];
	export let stop: UseChatHelpers['stop'];
	export let append: UseChatHelpers['append'];
	export let reload: UseChatHelpers['reload'];
	export let messages: UseChatHelpers['messages'];
	export let input: UseChatHelpers['input'];
</script>

<div class="fixed inset-x-0 bottom-0 bg-gradient-to-b from-muted/10 from-10% to-muted/30 to-50%">
	<ButtonScrollToBottom />
	<div class="mx-auto sm:max-w-2xl sm:px-4">
		<div class="flex h-10 items-center justify-center">
			{#if $isLoading}
				<Button variant="outline" on:click={() => stop()} class="bg-background">
					<IconStop class="mr-2" />
					Stop generating
				</Button>
			{:else if $messages?.length > 0}
				<Button variant="outline" on:click={() => reload()} class="bg-background">
					<IconRefresh class="mr-2" />
					Regenerate response
				</Button>
			{/if}
		</div>
		<div
			class="space-y-4 border-t bg-background px-4 py-2 shadow-lg sm:rounded-t-xl sm:border md:py-4"
		>
			<PromptForm
				on:submit={async (event) => {
					await append({
						id,
						content: event.detail,
						role: 'user'
					});
				}}
				{input}
				{isLoading}
			/>
			<FooterText class="hidden sm:block" />
		</div>
	</div>
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ClearHistory.svelte
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { IconSpinner } from '$lib/components/ui/icons';
	import {
		AlertDialog,
		AlertDialogAction,
		AlertDialogCancel,
		AlertDialogContent,
		AlertDialogDescription,
		AlertDialogFooter,
		AlertDialogHeader,
		AlertDialogTitle,
		AlertDialogTrigger
	} from '$lib/components/ui/alert-dialog';
	import { goto } from '$app/navigation';

	let isOpen: boolean;
	let isPending = false;
</script>

<AlertDialog bind:open={isOpen}>
	<AlertDialogTrigger>
		<Button variant="ghost" disabled={isPending}>
			{#if isPending}
				<IconSpinner className="mr-2" />
			{/if}
			Clear history
		</Button>
	</AlertDialogTrigger>
	<AlertDialogContent>
		<AlertDialogHeader>
			<AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
			<AlertDialogDescription>
				This will permanently delete your chat history and remove your data from our servers.
			</AlertDialogDescription>
		</AlertDialogHeader>
		<AlertDialogFooter>
			<AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
			<AlertDialogAction
				disabled={isPending}
				on:click={(event) => {
					event.preventDefault();

					// TODO: Clear chat history
					isPending = true;
					setTimeout(() => {
						isPending = false;

						isOpen = false;
						goto('/');
					}, 1000);
				}}
			>
				{#if isPending}
					<IconSpinner className="mr-2 animate-spin" />
				{/if}
				Delete
			</AlertDialogAction>
		</AlertDialogFooter>
	</AlertDialogContent>
</AlertDialog>


# File: also-a-sveltekit-chatbot-main/src/lib/components/EmptyScreen.svelte
<script lang="ts">
	import ExternalLink from '$lib/components/ExternalLink.svelte';
	import { Button } from '$lib/components/ui/button';
	import { IconArrowRight } from '$lib/components/ui/icons';
	import type { UseChatHelpers } from 'ai/svelte/dist';

	export let input: UseChatHelpers['input'];

	const exampleMessages = [
		{
			heading: 'Explain technical concepts',
			message: `What is a "serverless function"?`
		},
		{
			heading: 'Summarize an article',
			message: 'Summarize the following article for a 2nd grader: \n'
		},
		{
			heading: 'Draft an email',
			message: `Draft an email to my boss about the following: \n`
		}
	];
</script>

<div class="mx-auto max-w-2xl px-4">
	<div class="rounded-lg border bg-background p-8">
		<h1 class="mb-2 text-lg font-semibold">Welcome to SvelteKit AI Chatbot!</h1>
		<p class="mb-2 leading-normal text-muted-foreground">
			This is an open source AI chatbot app template built with
			<ExternalLink href="https://kit.svelte.dev">SvelteKit</ExternalLink> and
			<ExternalLink href="https://vercel.com/storage/kv">Vercel KV</ExternalLink>
			.
		</p>
		<p class="leading-normal text-muted-foreground">
			You can start a conversation here or try the following examples:
		</p>
		<div class="mt-4 flex flex-col items-start space-y-2">
			{#each exampleMessages as message}
				<Button
					variant="link"
					class="h-auto p-0 text-base"
					on:click={() => ($input = message.message)}
				>
					<IconArrowRight class="mr-2 text-muted-foreground" />
					{message.heading}
				</Button>
			{/each}
		</div>
	</div>
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ExternalLink.svelte
<script lang="ts">
	export let href: string;
</script>

<a {href} target="_blank" class="inline-flex flex-1 justify-center gap-1 leading-4 hover:underline">
	<span>
		<slot />
	</span>
	<svg aria-hidden="true" height="7" viewBox="0 0 6 6" width="7" class="opacity-70">
		<path
			d="M1.25215 5.54731L0.622742 4.9179L3.78169 1.75597H1.3834L1.38936 0.890915H5.27615V4.78069H4.40513L4.41109 2.38538L1.25215 5.54731Z"
			fill="currentColor"
		/>
	</svg>
</a>


# File: also-a-sveltekit-chatbot-main/src/lib/components/FooterText.svelte
<script lang="ts">
	import ExternalLink from '$lib/components/ExternalLink.svelte';
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<p
	class={cn('px-2 text-center text-xs leading-normal text-muted-foreground', className)}
	{...$$restProps}
>
	Open source AI chatbot built with
	<ExternalLink href="https://kit.svelte.dev">SvelteKit</ExternalLink> and
	<ExternalLink href="https://vercel.com/storage/kv">Vercel KV</ExternalLink>
	.
</p>


# File: also-a-sveltekit-chatbot-main/src/lib/components/Header.svelte
<script lang="ts">
	import { page } from '$app/stores';
	import ClearHistory from '$lib/components/ClearHistory.svelte';
	import LoginButton from '$lib/components/LoginButton.svelte';
	import Sidebar from '$lib/components/Sidebar.svelte';
	import SidebarFooter from '$lib/components/SidebarFooter.svelte';
	import SidebarList from '$lib/components/SidebarList.svelte';
	import ThemeToggle from '$lib/components/ThemeToggle.svelte';
	import UserMenu from '$lib/components/UserMenu.svelte';
	import { buttonVariants } from '$lib/components/ui/button';
	import { IconGitHub, IconSeparator, IconSvelteChat, IconVercel } from '$lib/components/ui/icons';
	import type { Chat } from '$lib/types';
	import { cn } from '$lib/utils';

	export let chats: Chat[];
</script>

<header
	class="sticky top-0 z-50 flex h-16 w-full shrink-0 items-center justify-between border-b bg-gradient-to-b from-background/10 via-background/50 to-background/80 px-4 backdrop-blur-xl"
>
	<div class="flex items-center">
		{#if $page.data.session}
			<Sidebar>
				<SidebarList {chats} />
				<SidebarFooter>
					<ThemeToggle />
					<ClearHistory />
				</SidebarFooter>
			</Sidebar>
		{:else}
			<a href="/" target="_blank" rel="nofollow">
				<IconSvelteChat class="mr-2 h-6 w-6 dark:hidden" inverted />
				<IconSvelteChat class="mr-2 hidden h-6 w-6 dark:block" />
			</a>
		{/if}
		<div class="flex items-center">
			<IconSeparator class="h-6 w-6 text-muted-foreground/50" />
			{#if $page.data.session}
				<UserMenu />
			{:else}
				<LoginButton variant="link" showGithubIcon={false} text="Login" class="-ml-2" />
			{/if}
		</div>
	</div>
	<div class="flex items-center justify-end space-x-2">
		<a
			target="_blank"
			href="https://github.com/jianyuan/sveltekit-ai-chatbot"
			rel="noopener noreferrer"
			class={cn(buttonVariants({ variant: 'outline' }))}
		>
			<IconGitHub />
			<span class="ml-2 hidden md:flex">GitHub</span>
		</a>
		<a
			href="https://github.com/jianyuan/sveltekit-ai-chatbot"
			target="_blank"
			class={cn(buttonVariants())}
		>
			<IconVercel class="mr-2" />
			<span class="hidden sm:block">Deploy to Vercel</span>
			<span class="sm:hidden">Deploy</span>
		</a>
	</div>
</header>


# File: also-a-sveltekit-chatbot-main/src/lib/components/LoginButton.svelte
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { IconGitHub, IconSpinner } from '$lib/components/ui/icons';
	import { cn } from '$lib/utils';
	import { signIn } from '@auth/sveltekit/client';

	export let text = 'Login with GitHub';
	export let showGithubIcon = true;

	let className: string | undefined | null = undefined;
	export { className as class };

	let isLoading = false;
</script>

<Button
	variant="outline"
	on:click={() => {
		isLoading = true;
		signIn('github', { callbackUrl: `/` });
	}}
	disabled={isLoading}
	class={cn(className)}
	{...$$restProps}
>
	{#if isLoading}
		<IconSpinner class="mr-2 animate-spin" />
	{:else if showGithubIcon}
		<IconGitHub class="mr-2" />
	{/if}
	{text}
</Button>


# File: also-a-sveltekit-chatbot-main/src/lib/components/PromptForm.svelte
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { IconArrowElbow, IconPlus } from '$lib/components/ui/icons';
	import { Tooltip, TooltipContent, TooltipTrigger } from '$lib/components/ui/tooltip';
	import type { UseChatHelpers } from 'ai/svelte';
	import { createEventDispatcher } from 'svelte';
	// @ts-ignore
	import autosize from 'svelte-autosize';

	const dispatch = createEventDispatcher<{ submit: string }>();

	export let isLoading: UseChatHelpers['isLoading'];
	export let input: UseChatHelpers['input'];

	async function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Enter' && !event.shiftKey) {
			event.preventDefault();
			await dispatch('submit', $input);
			$input = '';
		}
	}
</script>

<form
	on:submit={async (event) => {
		event.preventDefault();
		if ($input === '') {
			return;
		}
		await dispatch('submit', $input);
		$input = '';
	}}
>
	<div
		class="relative flex w-full grow flex-col overflow-hidden bg-background px-8 sm:rounded-md sm:border sm:px-12"
	>
		<Tooltip>
			<TooltipTrigger>
				<Button
					href="/"
					target="_self"
					size="sm"
					variant="outline"
					class="absolute left-0 top-4 h-8 w-8 rounded-full bg-background p-0 sm:left-4"
				>
					<IconPlus />
					<span class="sr-only">New Chat</span>
				</Button>
			</TooltipTrigger>
			<TooltipContent>New Chat</TooltipContent>
		</Tooltip>
		<textarea
			use:autosize
			autofocus={true}
			tabindex={0}
			on:keydown={handleKeydown}
			rows={1}
			bind:value={$input}
			placeholder="Send a message."
			spellcheck={false}
			class="min-h-[60px] w-full resize-none bg-transparent px-4 py-[1.3rem] focus-within:outline-none sm:text-sm"
		/>
		<div class="absolute right-0 top-4 sm:right-4">
			<Tooltip>
				<TooltipTrigger>
					<Button type="submit" size="icon" disabled={$isLoading || $input === ''}>
						<IconArrowElbow />
						<span class="sr-only">Send message</span>
					</Button>
				</TooltipTrigger>
				<TooltipContent>Send message</TooltipContent>
			</Tooltip>
		</div>
	</div>
</form>


# File: also-a-sveltekit-chatbot-main/src/lib/components/Sidebar.svelte
<script>
	import { Button } from '$lib/components/ui/button';
	import { IconSidebar } from '$lib/components/ui/icons';
	import {
		Sheet,
		SheetContent,
		SheetHeader,
		SheetTitle,
		SheetTrigger
	} from '$lib/components/ui/sheet';
</script>

<Sheet>
	<SheetTrigger>
		<Button variant="ghost" class="-ml-2 h-9 w-9 p-0">
			<IconSidebar class="h-6 w-6" />
			<span class="sr-only">Toggle Sidebar</span>
		</Button>
	</SheetTrigger>
	<SheetContent class="inset-y-0 flex h-auto w-[300px] flex-col p-0">
		<SheetHeader class="p-4">
			<SheetTitle class="text-sm">Chat History</SheetTitle>
		</SheetHeader>
		<slot />
	</SheetContent>
</Sheet>


# File: also-a-sveltekit-chatbot-main/src/lib/components/SidebarActions.svelte
<script lang="ts">
	import { goto } from '$app/navigation';
	import {
		AlertDialog,
		AlertDialogAction,
		AlertDialogCancel,
		AlertDialogContent,
		AlertDialogDescription,
		AlertDialogFooter,
		AlertDialogHeader,
		AlertDialogTitle
	} from '$lib/components/ui/alert-dialog';
	import { Button } from '$lib/components/ui/button';
	import {
		Dialog,
		DialogContent,
		DialogDescription,
		DialogFooter,
		DialogHeader,
		DialogTitle
	} from '$lib/components/ui/dialog';
	import { IconShare, IconSpinner, IconTrash, IconUsers } from '$lib/components/ui/icons';
	import { Tooltip, TooltipContent, TooltipTrigger } from '$lib/components/ui/tooltip';
	import type { Chat } from '$lib/types';
	import { cn, formatDate } from '$lib/utils';
	import { badgeVariants } from '$lib/components/ui/badge';

	export let chat: Chat;

	let isShareDialogOpen = false;
	let isSharePending = false;

	let isDeleteDialogOpen = false;
	let isRemovePending = false;
</script>

<div class="space-x-1">
	<Tooltip>
		<TooltipTrigger>
			<Button
				variant="ghost"
				class="h-6 w-6 p-0 hover:bg-background"
				on:click={() => (isShareDialogOpen = true)}
			>
				<IconShare />
				<span class="sr-only">Share</span>
			</Button>
		</TooltipTrigger>
		<TooltipContent>Share chat</TooltipContent>
	</Tooltip>
	<Tooltip>
		<TooltipTrigger>
			<Button
				variant="ghost"
				class="h-6 w-6 p-0 hover:bg-background"
				disabled={isRemovePending}
				on:click={() => (isDeleteDialogOpen = true)}
			>
				<IconTrash />
				<span class="sr-only">Delete</span>
			</Button>
		</TooltipTrigger>
		<TooltipContent>Delete chat</TooltipContent>
	</Tooltip>

	<Dialog bind:open={isShareDialogOpen}>
		<DialogContent>
			<DialogHeader>
				<DialogTitle>Share link to chat</DialogTitle>
				<DialogDescription>
					Anyone with the URL will be able to view the shared chat.
				</DialogDescription>
			</DialogHeader>
			<div class="space-y-1 rounded-md border p-4 text-sm">
				<div class="font-medium">{chat.title}</div>
				<div class="text-muted-foreground">
					{formatDate(chat.createdAt)} · {chat.messages.length} messages
				</div>
			</div>
			<DialogFooter class="items-center">
				{#if chat.sharePath}
					<a
						href={chat.sharePath}
						class={cn(badgeVariants({ variant: 'secondary' }), 'mr-auto')}
						target="_blank"
					>
						<IconUsers class="mr-2" />
						{chat.sharePath}
					</a>
				{/if}
				<Button
					disabled={isSharePending}
					on:click={() => {
						// TODO: Implement sharing
					}}
				>
					{#if isSharePending}
						<IconSpinner class="mr-2 animate-spin" />
						Copying...
					{:else}
						Copy link
					{/if}
				</Button>
			</DialogFooter>
		</DialogContent>
	</Dialog>

	<AlertDialog bind:open={isDeleteDialogOpen}>
		<AlertDialogContent>
			<AlertDialogHeader>
				<AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
				<AlertDialogDescription>
					This will permanently delete your chat message and remove your data from our servers.
				</AlertDialogDescription>
			</AlertDialogHeader>
			<AlertDialogFooter>
				<AlertDialogCancel disabled={isRemovePending}>Cancel</AlertDialogCancel>
				<AlertDialogAction
					disabled={isRemovePending}
					on:click={async (event) => {
						event.preventDefault();

						// TODO: Implement message deletion

						isDeleteDialogOpen = false;
						goto('/', { invalidateAll: true });
						// TODO: Toast
					}}
				>
					{#if isRemovePending}
						<IconSpinner class="mr-2 animate-spin" />
					{/if}
					Delete
				</AlertDialogAction>
			</AlertDialogFooter>
		</AlertDialogContent>
	</AlertDialog>
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/SidebarFooter.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<div class={cn('flex items-center justify-between p-4', className)} {...$$restProps}>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/SidebarItem.svelte
<script lang="ts">
	import { page } from '$app/stores';
	import { Button } from '$lib/components/ui/button';
	import { IconMessage, IconUsers } from '$lib/components/ui/icons';
	import { Tooltip, TooltipContent, TooltipTrigger } from '$lib/components/ui/tooltip';
	import type { Chat } from '$lib/types';
	import { cn } from '$lib/utils';

	export let chat: Chat;

	$: isActive = $page.params.id === chat.id;
</script>

<div class="relative">
	<div class="absolute left-2 top-1 flex h-6 w-6 items-center justify-center">
		{#if chat.sharePath}
			<Tooltip>
				<TooltipTrigger tabindex={-1} class="focus:bg-muted focus:ring-1 focus:ring-ring">
					<IconUsers class="mr-2" />
				</TooltipTrigger>
				<TooltipContent>This is a shared chat.</TooltipContent>
			</Tooltip>
		{:else}
			<IconMessage class="mr-2" />
		{/if}
	</div>
	<Button
		href={chat.path}
		variant="ghost"
		class={cn('group w-full pl-8 pr-16', isActive && 'bg-accent')}
	>
		<div
			class="relative max-h-5 flex-1 select-none overflow-hidden text-ellipsis break-all"
			title={chat.title}
		>
			<span class="whitespace-nowrap">{chat.title}</span>
		</div>
	</Button>
	{#if isActive}
		<div class="absolute right-2 top-1">
			<slot />
		</div>
	{/if}
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/SidebarList.svelte
<script lang="ts">
	import SidebarActions from '$lib/components/SidebarActions.svelte';
	import SidebarItem from '$lib/components/SidebarItem.svelte';
	import type { Chat } from '$lib/types';

	export let chats: Chat[];

	const removeChat = void 0;
	const shareChat = void 0;
</script>

<div class="flex-1 overflow-auto">
	{#if chats.length}
		<div class="space-y-2 px-2">
			{#each chats as chat (chat.id)}
				<SidebarItem {chat}>
					<SidebarActions {chat} />
				</SidebarItem>
			{/each}
		</div>
	{:else}
		<div class="p-8 text-center">
			<p class="text-sm text-muted-foreground">No chat history</p>
		</div>
	{/if}
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ThemeToggle.svelte
<script lang="ts">
	import { browser } from '$app/environment';
	import { Button } from '$lib/components/ui/button';
	import { IconMoon, IconSun } from '$lib/components/ui/icons';
	import { resolvedTheme, theme } from '$lib/theme';
</script>

<Button
	variant="ghost"
	size="icon"
	on:click={(event) => {
		event.preventDefault();
		if ($resolvedTheme === 'dark') {
			theme.set('light');
		} else {
			theme.set('dark');
		}
	}}
>
	{#if $resolvedTheme === 'dark'}
		<IconMoon class="transition-all" />
	{:else}
		<IconSun class="transition-all" />
	{/if}
	<span class="sr-only">Toggle theme</span>
</Button>


# File: also-a-sveltekit-chatbot-main/src/lib/components/UserMenu.svelte
<script lang="ts">
	import { page } from '$app/stores';
	import { IconExternalLink } from '$lib/components/ui/icons';
	import { cn } from '$lib/utils';
	import { Menu, MenuButton, MenuItem, MenuItems } from '@rgossiaux/svelte-headlessui';
	import { Button } from './ui/button';
	import { signOut } from '@auth/sveltekit/client';

	function getUserInitials(name: string) {
		const [firstName, lastName] = name.split(' ');
		return lastName ? `${firstName[0]}${lastName[0]}` : firstName.slice(0, 2);
	}
</script>

<div class="flex items-center justify-between">
	<Menu class="relative">
		<MenuButton>
			<Button variant="ghost" class="pl-0">
				{#if $page.data.session?.user?.image}
					<img
						class="h-6 w-6 select-none rounded-full ring-1 ring-zinc-100/10 transition-opacity duration-300 hover:opacity-80"
						src={$page.data.session?.user?.image ? `${$page.data.session?.user?.image}&s=60` : ''}
						alt={$page.data.session?.user?.name ?? 'Avatar'}
					/>
				{:else}
					<div
						class="flex h-7 w-7 shrink-0 select-none items-center justify-center rounded-full bg-muted/50 text-xs font-medium uppercase text-muted-foreground"
					>
						{$page.data.session?.user?.name
							? getUserInitials($page.data.session?.user?.name)
							: null}
					</div>
				{/if}
				<span class="ml-2">{$page.data.session?.user?.name}</span>
			</Button>
		</MenuButton>
		<MenuItems
			class={cn(
				'absolute',
				'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow animate-in data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
				'w-[180px] mt-2'
			)}
		>
			<MenuItem let:active>
				<div
					class={cn(
						'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
						active ? 'bg-accent text-accent-foreground' : null,
						'flex-col items-start'
					)}
				>
					<div class="text-xs font-medium">{$page.data.session?.user?.name}</div>
					<div class="text-xs text-zinc-500">{$page.data.session?.user?.email}</div>
				</div>
			</MenuItem>
			<div class="-mx-1 my-1 h-px bg-muted" />
			<MenuItem let:active>
				<a
					href="https://jianyuan.io"
					target="_blank"
					rel="noopener noreferrer"
					class={cn(
						'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
						active ? 'bg-accent text-accent-foreground' : null,
						'inline-flex items-center justify-between w-full text-xs'
					)}
				>
					jianyuan.IO
					<IconExternalLink className="w-3 h-3 ml-auto" />
				</a>
			</MenuItem>
			<MenuItem let:active>
				<a
					href="https://vercel.com"
					target="_blank"
					rel="noopener noreferrer"
					class={cn(
						'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
						active ? 'bg-accent text-accent-foreground' : null,
						'inline-flex items-center justify-between w-full text-xs'
					)}
				>
					Vercel Homepage
					<IconExternalLink className="w-3 h-3 ml-auto" />
				</a>
			</MenuItem>
			<MenuItem let:active>
				<a
					href="/"
					class={cn(
						'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
						active ? 'bg-accent text-accent-foreground' : null,
						'inline-flex items-center justify-between w-full text-xs'
					)}
					on:click={(event) => {
						event.preventDefault();
						signOut({ callbackUrl: '/' });
					}}
				>
					Log Out
				</a>
			</MenuItem>
		</MenuItems>
	</Menu>
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-action.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";
	import { buttonVariants } from "$lib/components/ui/button";
	import { cn } from "$lib/utils";

	type $$Props = AlertDialogPrimitive.ActionProps;
	type $$Events = AlertDialogPrimitive.ActionEvents;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<AlertDialogPrimitive.Action
	class={cn(buttonVariants(), className)}
	{...$$restProps}
	on:click
	on:keydown
	let:builder
>
	<slot {builder} />
</AlertDialogPrimitive.Action>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-cancel.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";
	import { buttonVariants } from "$lib/components/ui/button";
	import { cn } from "$lib/utils";

	type $$Props = AlertDialogPrimitive.CancelProps;
	type $$Events = AlertDialogPrimitive.CancelEvents;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<AlertDialogPrimitive.Cancel
	class={cn(
		buttonVariants({ variant: "outline" }),
		"mt-2 sm:mt-0",
		className
	)}
	{...$$restProps}
	on:click
	on:keydown
	let:builder
>
	<slot {builder} />
</AlertDialogPrimitive.Cancel>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-content.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";
	import * as AlertDialog from ".";
	import { cn, flyAndScale } from "$lib/utils";

	type $$Props = AlertDialogPrimitive.ContentProps;

	export let transition: $$Props["transition"] = flyAndScale;
	export let transitionConfig: $$Props["transitionConfig"] = undefined;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<AlertDialog.Portal>
	<AlertDialog.Overlay />
	<AlertDialogPrimitive.Content
		{transition}
		{transitionConfig}
		class={cn(
			"fixed left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] z-50 grid w-full max-w-lg gap-4 border bg-background p-6 shadow-lg sm:rounded-lg md:w-full",
			className
		)}
		{...$$restProps}
	>
		<slot />
	</AlertDialogPrimitive.Content>
</AlertDialog.Portal>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-description.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = AlertDialogPrimitive.DescriptionProps;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<AlertDialogPrimitive.Description
	class={cn("text-sm text-muted-foreground", className)}
	{...$$restProps}
>
	<slot />
</AlertDialogPrimitive.Description>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-footer.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import type { HTMLAttributes } from "svelte/elements";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn(
		"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
		className
	)}
	{...$$restProps}
>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-header.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import type { HTMLAttributes } from "svelte/elements";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
	{...$$restProps}
>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-overlay.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";
	import { fade } from "svelte/transition";

	type $$Props = AlertDialogPrimitive.OverlayProps;

	let className: $$Props["class"] = undefined;
	export let transition: $$Props["transition"] = fade;
	export let transitionConfig: $$Props["transitionConfig"] = {
		duration: 150
	};
	export { className as class };
</script>

<AlertDialogPrimitive.Overlay
	{transition}
	{transitionConfig}
	class={cn(
		"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm ",
		className
	)}
	{...$$restProps}
/>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-portal.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";

	type $$Props = AlertDialogPrimitive.PortalProps;
</script>

<AlertDialogPrimitive.Portal {...$$restProps}>
	<slot />
</AlertDialogPrimitive.Portal>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/alert-dialog-title.svelte
<script lang="ts">
	import { AlertDialog as AlertDialogPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = AlertDialogPrimitive.TitleProps;

	let className: $$Props["class"] = undefined;
	export let level: $$Props["level"] = "h3";
	export { className as class };
</script>

<AlertDialogPrimitive.Title
	class={cn("text-lg font-semibold", className)}
	{level}
	{...$$restProps}
>
	<slot />
</AlertDialogPrimitive.Title>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/alert-dialog/index.ts
import { AlertDialog as AlertDialogPrimitive } from "bits-ui";

const Root = AlertDialogPrimitive.Root;
const Trigger = AlertDialogPrimitive.Trigger;

import Title from "./alert-dialog-title.svelte";
import Action from "./alert-dialog-action.svelte";
import Cancel from "./alert-dialog-cancel.svelte";
import Portal from "./alert-dialog-portal.svelte";
import Footer from "./alert-dialog-footer.svelte";
import Header from "./alert-dialog-header.svelte";
import Overlay from "./alert-dialog-overlay.svelte";
import Content from "./alert-dialog-content.svelte";
import Description from "./alert-dialog-description.svelte";

export {
	Root,
	Title,
	Action,
	Cancel,
	Portal,
	Footer,
	Header,
	Trigger,
	Overlay,
	Content,
	Description,
	//
	Root as AlertDialog,
	Title as AlertDialogTitle,
	Action as AlertDialogAction,
	Cancel as AlertDialogCancel,
	Portal as AlertDialogPortal,
	Footer as AlertDialogFooter,
	Header as AlertDialogHeader,
	Trigger as AlertDialogTrigger,
	Overlay as AlertDialogOverlay,
	Content as AlertDialogContent,
	Description as AlertDialogDescription
};


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/badge/badge.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import { badgeVariants, type Variant } from ".";

	let className: string | undefined | null = undefined;
	export let href: string | undefined = undefined;
	export let variant: Variant = "default";
	export { className as class };
</script>

<svelte:element
	this={href ? "a" : "span"}
	{href}
	class={cn(badgeVariants({ variant, className }))}
	{...$$restProps}
>
	<slot />
</svelte:element>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/badge/index.ts
import { tv, type VariantProps } from "tailwind-variants";
export { default as Badge } from "./badge.svelte";

export const badgeVariants = tv({
	base: "inline-flex items-center border rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none select-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
	variants: {
		variant: {
			default:
				"bg-primary hover:bg-primary/80 border-transparent text-primary-foreground",
			secondary:
				"bg-secondary hover:bg-secondary/80 border-transparent text-secondary-foreground",
			destructive:
				"bg-destructive hover:bg-destructive/80 border-transparent text-destructive-foreground",
			outline: "text-foreground"
		}
	},
	defaultVariants: {
		variant: "default"
	}
});

export type Variant = VariantProps<typeof badgeVariants>["variant"];


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/button/button.svelte
<script lang="ts">
	import { Button as ButtonPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";
	import { buttonVariants, type Props, type Events } from ".";

	type $$Props = Props;
	type $$Events = Events;

	let className: $$Props["class"] = undefined;
	export let variant: $$Props["variant"] = "default";
	export let size: $$Props["size"] = "default";
	export let builders: $$Props["builders"] = [];
	export { className as class };
</script>

<ButtonPrimitive.Root
	{builders}
	class={cn(buttonVariants({ variant, size, className }))}
	{...$$restProps}
	on:click
	on:keydown
>
	<slot />
</ButtonPrimitive.Root>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/button/index.ts
import Root from "./button.svelte";
import { tv, type VariantProps } from "tailwind-variants";
import type { Button as ButtonPrimitive } from "bits-ui";

const buttonVariants = tv({
	base: "inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
	variants: {
		variant: {
			default: "bg-primary text-primary-foreground hover:bg-primary/90",
			destructive:
				"bg-destructive text-destructive-foreground hover:bg-destructive/90",
			outline:
				"border border-input bg-background hover:bg-accent hover:text-accent-foreground",
			secondary:
				"bg-secondary text-secondary-foreground hover:bg-secondary/80",
			ghost: "hover:bg-accent hover:text-accent-foreground",
			link: "text-primary underline-offset-4 hover:underline"
		},
		size: {
			default: "h-10 px-4 py-2",
			sm: "h-9 rounded-md px-3",
			lg: "h-11 rounded-md px-8",
			icon: "h-10 w-10"
		}
	},
	defaultVariants: {
		variant: "default",
		size: "default"
	}
});

type Variant = VariantProps<typeof buttonVariants>["variant"];
type Size = VariantProps<typeof buttonVariants>["size"];

type Props = ButtonPrimitive.Props & {
	variant?: Variant;
	size?: Size;
};

type Events = ButtonPrimitive.Events;

export {
	Root,
	type Props,
	type Events,
	//
	Root as Button,
	type Props as ButtonProps,
	type Events as ButtonEvents,
	buttonVariants
};


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-content.svelte
<script lang="ts">
	import { Dialog as DialogPrimitive } from "bits-ui";
	import * as Dialog from ".";
	import { cn, flyAndScale } from "$lib/utils";
	import { X } from "lucide-svelte";

	type $$Props = DialogPrimitive.ContentProps;

	let className: $$Props["class"] = undefined;
	export let transition: $$Props["transition"] = flyAndScale;
	export let transitionConfig: $$Props["transitionConfig"] = {
		duration: 200
	};
	export { className as class };
</script>

<Dialog.Portal>
	<Dialog.Overlay />
	<DialogPrimitive.Content
		{transition}
		{transitionConfig}
		class={cn(
			"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg sm:rounded-lg md:w-full",
			className
		)}
		{...$$restProps}
	>
		<slot />
		<DialogPrimitive.Close
			class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
		>
			<X class="h-4 w-4" />
			<span class="sr-only">Close</span>
		</DialogPrimitive.Close>
	</DialogPrimitive.Content>
</Dialog.Portal>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-description.svelte
<script lang="ts">
	import { Dialog as DialogPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = DialogPrimitive.DescriptionProps;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<DialogPrimitive.Description
	class={cn("text-sm text-muted-foreground", className)}
	{...$$restProps}
>
	<slot />
</DialogPrimitive.Description>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-footer.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import type { HTMLAttributes } from "svelte/elements";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn(
		"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
		className
	)}
	{...$$restProps}
>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-header.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import type { HTMLAttributes } from "svelte/elements";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
	{...$$restProps}
>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-overlay.svelte
<script lang="ts">
	import { Dialog as DialogPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";
	import { fade } from "svelte/transition";

	type $$Props = DialogPrimitive.OverlayProps;

	let className: $$Props["class"] = undefined;
	export let transition: $$Props["transition"] = fade;
	export let transitionConfig: $$Props["transitionConfig"] = {
		duration: 150
	};
	export { className as class };
</script>

<DialogPrimitive.Overlay
	{transition}
	{transitionConfig}
	class={cn(
		"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm",
		className
	)}
	{...$$restProps}
/>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-portal.svelte
<script lang="ts">
	import { Dialog as DialogPrimitive } from "bits-ui";
	type $$Props = DialogPrimitive.PortalProps;
</script>

<DialogPrimitive.Portal {...$$restProps}>
	<slot />
</DialogPrimitive.Portal>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/dialog-title.svelte
<script lang="ts">
	import { Dialog as DialogPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = DialogPrimitive.TitleProps;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<DialogPrimitive.Title
	class={cn("text-lg font-semibold leading-none tracking-tight", className)}
	{...$$restProps}
>
	<slot />
</DialogPrimitive.Title>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/dialog/index.ts
import { Dialog as DialogPrimitive } from "bits-ui";

const Root = DialogPrimitive.Root;
const Trigger = DialogPrimitive.Trigger;

import Title from "./dialog-title.svelte";
import Portal from "./dialog-portal.svelte";
import Footer from "./dialog-footer.svelte";
import Header from "./dialog-header.svelte";
import Overlay from "./dialog-overlay.svelte";
import Content from "./dialog-content.svelte";
import Description from "./dialog-description.svelte";

export {
	Root,
	Title,
	Portal,
	Footer,
	Header,
	Trigger,
	Overlay,
	Content,
	Description,
	//
	Root as Dialog,
	Title as DialogTitle,
	Portal as DialogPortal,
	Footer as DialogFooter,
	Header as DialogHeader,
	Trigger as DialogTrigger,
	Overlay as DialogOverlay,
	Content as DialogContent,
	Description as DialogDescription
};


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconArrowDown.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="m205.66 149.66-72 72a8 8 0 0 1-11.32 0l-72-72a8 8 0 0 1 11.32-11.32L120 196.69V40a8 8 0 0 1 16 0v156.69l58.34-58.35a8 8 0 0 1 11.32 11.32Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconArrowElbow.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M200 32v144a8 8 0 0 1-8 8H67.31l34.35 34.34a8 8 0 0 1-11.32 11.32l-48-48a8 8 0 0 1 0-11.32l48-48a8 8 0 0 1 11.32 11.32L67.31 168H184V32a8 8 0 0 1 16 0Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconArrowRight.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="m221.66 133.66-72 72a8 8 0 0 1-11.32-11.32L196.69 136H40a8 8 0 0 1 0-16h156.69l-58.35-58.34a8 8 0 0 1 11.32-11.32l72 72a8 8 0 0 1 0 11.32Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconCheck.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="m229.66 77.66-128 128a8 8 0 0 1-11.32 0l-56-56a8 8 0 0 1 11.32-11.32L96 188.69 218.34 66.34a8 8 0 0 1 11.32 11.32Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconClose.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M205.66 194.34a8 8 0 0 1-11.32 11.32L128 139.31l-66.34 66.35a8 8 0 0 1-11.32-11.32L116.69 128 50.34 61.66a8 8 0 0 1 11.32-11.32L128 116.69l66.34-66.35a8 8 0 0 1 11.32 11.32L139.31 128Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconCopy.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M216 32H88a8 8 0 0 0-8 8v40H40a8 8 0 0 0-8 8v128a8 8 0 0 0 8 8h128a8 8 0 0 0 8-8v-40h40a8 8 0 0 0 8-8V40a8 8 0 0 0-8-8Zm-56 176H48V96h112Zm48-48h-32V88a8 8 0 0 0-8-8H96V48h112Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconExternalLink.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M224 104a8 8 0 0 1-16 0V59.32l-66.33 66.34a8 8 0 0 1-11.32-11.32L196.68 48H152a8 8 0 0 1 0-16h64a8 8 0 0 1 8 8Zm-40 24a8 8 0 0 0-8 8v72H48V80h72a8 8 0 0 0 0-16H48a16 16 0 0 0-16 16v128a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-72a8 8 0 0 0-8-8Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconGitHub.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	role="img"
	viewBox="0 0 24 24"
	xmlns="http://www.w3.org/2000/svg"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<title>GitHub</title>
	<path
		d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconMessage.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M216 48H40a16 16 0 0 0-16 16v160a15.84 15.84 0 0 0 9.25 14.5A16.05 16.05 0 0 0 40 240a15.89 15.89 0 0 0 10.25-3.78.69.69 0 0 0 .13-.11L82.5 208H216a16 16 0 0 0 16-16V64a16 16 0 0 0-16-16ZM40 224Zm176-32H82.5a16 16 0 0 0-10.3 3.75l-.12.11L40 224V64h176Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconMoon.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M233.54 142.23a8 8 0 0 0-8-2 88.08 88.08 0 0 1-109.8-109.8 8 8 0 0 0-10-10 104.84 104.84 0 0 0-52.91 37A104 104 0 0 0 136 224a103.09 103.09 0 0 0 62.52-20.88 104.84 104.84 0 0 0 37-52.91 8 8 0 0 0-1.98-7.98Zm-44.64 48.11A88 88 0 0 1 65.66 67.11a89 89 0 0 1 31.4-26A106 106 0 0 0 96 56a104.11 104.11 0 0 0 104 104 106 106 0 0 0 14.92-1.06 89 89 0 0 1-26.02 31.4Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconOpenAI.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	fill="currentColor"
	viewBox="0 0 24 24"
	role="img"
	xmlns="http://www.w3.org/2000/svg"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<title>OpenAI icon</title>
	<path
		d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconPlus.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M224 128a8 8 0 0 1-8 8h-80v80a8 8 0 0 1-16 0v-80H40a8 8 0 0 1 0-16h80V40a8 8 0 0 1 16 0v80h80a8 8 0 0 1 8 8Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconRefresh.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M197.67 186.37a8 8 0 0 1 0 11.29C196.58 198.73 170.82 224 128 224c-37.39 0-64.53-22.4-80-39.85V208a8 8 0 0 1-16 0v-48a8 8 0 0 1 8-8h48a8 8 0 0 1 0 16H55.44C67.76 183.35 93 208 128 208c36 0 58.14-21.46 58.36-21.68a8 8 0 0 1 11.31.05ZM216 40a8 8 0 0 0-8 8v23.85C192.53 54.4 165.39 32 128 32c-42.82 0-68.58 25.27-69.66 26.34a8 8 0 0 0 11.3 11.34C69.86 69.46 92 48 128 48c35 0 60.24 24.65 72.56 40H168a8 8 0 0 0 0 16h48a8 8 0 0 0 8-8V48a8 8 0 0 0-8-8Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconSeparator.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	fill="none"
	shape-rendering="geometricPrecision"
	stroke="currentColor"
	stroke-linecap="round"
	stroke-linejoin="round"
	stroke-width="1"
	viewBox="0 0 24 24"
	aria-hidden="true"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path d="M16.88 3.549L7.12 20.451" />
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconShare.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="m237.66 106.35-80-80A8 8 0 0 0 144 32v40.35c-25.94 2.22-54.59 14.92-78.16 34.91-28.38 24.08-46.05 55.11-49.76 87.37a12 12 0 0 0 20.68 9.58c11-11.71 50.14-48.74 107.24-52V192a8 8 0 0 0 13.66 5.65l80-80a8 8 0 0 0 0-11.3ZM160 172.69V144a8 8 0 0 0-8-8c-28.08 0-55.43 7.33-81.29 21.8a196.17 196.17 0 0 0-36.57 26.52c5.8-23.84 20.42-46.51 42.05-64.86C99.41 99.77 127.75 88 152 88a8 8 0 0 0 8-8V51.32L220.69 112Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconSidebar.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M216 40H40a16 16 0 0 0-16 16v144a16 16 0 0 0 16 16h176a16 16 0 0 0 16-16V56a16 16 0 0 0-16-16ZM40 56h40v144H40Zm176 144H96V56h120v144Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconSpinner.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4 animate-spin', className)}
	{...$$restProps}
>
	<path
		d="M232 128a104 104 0 0 1-208 0c0-41 23.81-78.36 60.66-95.27a8 8 0 0 1 6.68 14.54C60.15 61.59 40 93.27 40 128a88 88 0 0 0 176 0c0-34.73-20.15-66.41-51.34-80.73a8 8 0 0 1 6.68-14.54C208.19 49.64 232 87 232 128Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconStop.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M128 24a104 104 0 1 0 104 104A104.11 104.11 0 0 0 128 24Zm0 192a88 88 0 1 1 88-88 88.1 88.1 0 0 1-88 88Zm24-120h-48a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h48a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8Zm-8 48h-32v-32h32Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconSun.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M120 40V16a8 8 0 0 1 16 0v24a8 8 0 0 1-16 0Zm72 88a64 64 0 1 1-64-64 64.07 64.07 0 0 1 64 64Zm-16 0a48 48 0 1 0-48 48 48.05 48.05 0 0 0 48-48ZM58.34 69.66a8 8 0 0 0 11.32-11.32l-16-16a8 8 0 0 0-11.32 11.32Zm0 116.68-16 16a8 8 0 0 0 11.32 11.32l16-16a8 8 0 0 0-11.32-11.32ZM192 72a8 8 0 0 0 5.66-2.34l16-16a8 8 0 0 0-11.32-11.32l-16 16A8 8 0 0 0 192 72Zm5.66 114.34a8 8 0 0 0-11.32 11.32l16 16a8 8 0 0 0 11.32-11.32ZM48 128a8 8 0 0 0-8-8H16a8 8 0 0 0 0 16h24a8 8 0 0 0 8-8Zm80 80a8 8 0 0 0-8 8v24a8 8 0 0 0 16 0v-24a8 8 0 0 0-8-8Zm112-88h-24a8 8 0 0 0 0 16h24a8 8 0 0 0 0-16Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconSvelteChat.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	export let inverted = false;

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	viewBox="0 0 17 17"
	fill="none"
	xmlns="http://www.w3.org/2000/svg"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M1 16L2.58314 11.2506C1.83084 9.74642 1.63835 8.02363 2.04013 6.39052C2.4419 4.75741 3.41171 3.32057 4.776 2.33712C6.1403 1.35367 7.81003 0.887808 9.4864 1.02289C11.1628 1.15798 12.7364 1.8852 13.9256 3.07442C15.1148 4.26363 15.842 5.83723 15.9771 7.5136C16.1122 9.18997 15.6463 10.8597 14.6629 12.224C13.6794 13.5883 12.2426 14.5581 10.6095 14.9599C8.97637 15.3616 7.25358 15.1692 5.74942 14.4169L1 16Z"
		fill={inverted ? 'black' : 'white'}
		stroke={inverted ? 'black' : 'white'}
		stroke-width={2}
		stroke-linecap="round"
		stroke-linejoin="round"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconTrash.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M216 48h-40v-8a24 24 0 0 0-24-24h-48a24 24 0 0 0-24 24v8H40a8 8 0 0 0 0 16h8v144a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16V64h8a8 8 0 0 0 0-16ZM96 40a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v8H96Zm96 168H64V64h128Zm-80-104v64a8 8 0 0 1-16 0v-64a8 8 0 0 1 16 0Zm48 0v64a8 8 0 0 1-16 0v-64a8 8 0 0 1 16 0Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconUser.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M230.92 212c-15.23-26.33-38.7-45.21-66.09-54.16a72 72 0 1 0-73.66 0c-27.39 8.94-50.86 27.82-66.09 54.16a8 8 0 1 0 13.85 8c18.84-32.56 52.14-52 89.07-52s70.23 19.44 89.07 52a8 8 0 1 0 13.85-8ZM72 96a56 56 0 1 1 56 56 56.06 56.06 0 0 1-56-56Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconUsers.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox="0 0 256 256"
	fill="currentColor"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path
		d="M117.25 157.92a60 60 0 1 0-66.5 0 95.83 95.83 0 0 0-47.22 37.71 8 8 0 1 0 13.4 8.74 80 80 0 0 1 134.14 0 8 8 0 0 0 13.4-8.74 95.83 95.83 0 0 0-47.22-37.71ZM40 108a44 44 0 1 1 44 44 44.05 44.05 0 0 1-44-44Zm210.14 98.7a8 8 0 0 1-11.07-2.33A79.83 79.83 0 0 0 172 168a8 8 0 0 1 0-16 44 44 0 1 0-16.34-84.87 8 8 0 1 1-5.94-14.85 60 60 0 0 1 55.53 105.64 95.83 95.83 0 0 1 47.22 37.71 8 8 0 0 1-2.33 11.07Z"
	/>
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/IconVercel.svelte
<script lang="ts">
	import { cn } from '$lib/utils';

	let className: string | undefined | null = undefined;
	export { className as class };
</script>

<svg
	aria-label="Vercel logomark"
	role="img"
	viewBox="0 0 74 64"
	class={cn('h-4 w-4', className)}
	{...$$restProps}
>
	<path d="M37.5896 0.25L74.5396 64.25H0.639648L37.5896 0.25Z" fill="currentColor" />
</svg>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/icons/index.ts
export { default as IconArrowDown } from './IconArrowDown.svelte';
export { default as IconArrowElbow } from './IconArrowElbow.svelte';
export { default as IconArrowRight } from './IconArrowRight.svelte';
export { default as IconCheck } from './IconCheck.svelte';
export { default as IconClose } from './IconClose.svelte';
export { default as IconCopy } from './IconCopy.svelte';
export { default as IconExternalLink } from './IconExternalLink.svelte';
export { default as IconGitHub } from './IconGitHub.svelte';
export { default as IconMessage } from './IconMessage.svelte';
export { default as IconMoon } from './IconMoon.svelte';
export { default as IconOpenAI } from './IconOpenAI.svelte';
export { default as IconPlus } from './IconPlus.svelte';
export { default as IconRefresh } from './IconRefresh.svelte';
export { default as IconSeparator } from './IconSeparator.svelte';
export { default as IconShare } from './IconShare.svelte';
export { default as IconSidebar } from './IconSidebar.svelte';
export { default as IconSpinner } from './IconSpinner.svelte';
export { default as IconStop } from './IconStop.svelte';
export { default as IconSun } from './IconSun.svelte';
export { default as IconSvelteChat } from './IconSvelteChat.svelte';
export { default as IconTrash } from './IconTrash.svelte';
export { default as IconUser } from './IconUser.svelte';
export { default as IconUsers } from './IconUsers.svelte';
export { default as IconVercel } from './IconVercel.svelte';


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/separator/index.ts
import Root from "./separator.svelte";

export {
	Root,
	//
	Root as Separator
};


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/separator/separator.svelte
<script lang="ts">
	import { Separator as SeparatorPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = SeparatorPrimitive.Props;

	let className: $$Props["class"] = undefined;
	export let orientation: $$Props["orientation"] = "horizontal";
	export let decorative: $$Props["decorative"] = undefined;
	export { className as class };
</script>

<SeparatorPrimitive.Root
	class={cn(
		"shrink-0 bg-border",
		orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
		className
	)}
	{orientation}
	{decorative}
	{...$$restProps}
/>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/index.ts
import { Dialog as SheetPrimitive } from "bits-ui";
import { tv, type VariantProps } from "tailwind-variants";

import Portal from "./sheet-portal.svelte";
import Overlay from "./sheet-overlay.svelte";
import Content from "./sheet-content.svelte";
import Header from "./sheet-header.svelte";
import Footer from "./sheet-footer.svelte";
import Title from "./sheet-title.svelte";
import Description from "./sheet-description.svelte";

const Root = SheetPrimitive.Root;
const Close = SheetPrimitive.Close;
const Trigger = SheetPrimitive.Trigger;

export {
	Root,
	Close,
	Trigger,
	Portal,
	Overlay,
	Content,
	Header,
	Footer,
	Title,
	Description,
	//
	Root as Sheet,
	Close as SheetClose,
	Trigger as SheetTrigger,
	Portal as SheetPortal,
	Overlay as SheetOverlay,
	Content as SheetContent,
	Header as SheetHeader,
	Footer as SheetFooter,
	Title as SheetTitle,
	Description as SheetDescription
};

export const sheetVariants = tv({
	base: "fixed z-50 gap-4 bg-background p-6 shadow-lg",
	variants: {
		side: {
			top: "inset-x-0 top-0 border-b",
			bottom: "inset-x-0 bottom-0 border-t",
			left: "inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
			right: "inset-y-0 right-0 h-full w-3/4  border-l sm:max-w-sm"
		}
	},
	defaultVariants: {
		side: "right"
	}
});

export const sheetTransitions = {
	top: {
		in: {
			y: "-100%",
			duration: 500,
			opacity: 1
		},
		out: {
			y: "-100%",
			duration: 300,
			opacity: 1
		}
	},
	bottom: {
		in: {
			y: "100%",
			duration: 500,
			opacity: 1
		},
		out: {
			y: "100%",
			duration: 300,
			opacity: 1
		}
	},
	left: {
		in: {
			x: "-100%",
			duration: 500,
			opacity: 1
		},
		out: {
			x: "-100%",
			duration: 300,
			opacity: 1
		}
	},
	right: {
		in: {
			x: "100%",
			duration: 500,
			opacity: 1
		},
		out: {
			x: "100%",
			duration: 300,
			opacity: 1
		}
	}
};

export type Side = VariantProps<typeof sheetVariants>["side"];


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-content.svelte
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import {
		SheetOverlay,
		SheetPortal,
		sheetTransitions,
		sheetVariants,
		type Side
	} from ".";
	import { X } from "lucide-svelte";
	import { cn } from "$lib/utils";
	import { fly } from "svelte/transition";

	type $$Props = SheetPrimitive.ContentProps & {
		side?: Side;
	};

	let className: $$Props["class"] = undefined;
	export let side: $$Props["side"] = "right";
	export { className as class };
	export let inTransition: $$Props["inTransition"] = fly;
	export let inTransitionConfig: $$Props["inTransitionConfig"] =
		sheetTransitions[side ? side : "right"]["in"];
	export let outTransition: $$Props["outTransition"] = fly;
	export let outTransitionConfig: $$Props["outTransitionConfig"] =
		sheetTransitions[side ? side : "right"]["out"];
</script>

<SheetPortal>
	<SheetOverlay />
	<SheetPrimitive.Content
		{inTransition}
		{inTransitionConfig}
		{outTransition}
		{outTransitionConfig}
		class={cn(sheetVariants({ side }), className)}
		{...$$restProps}
	>
		<slot />
		<SheetPrimitive.Close
			class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"
		>
			<X class="h-4 w-4" />
			<span class="sr-only">Close</span>
		</SheetPrimitive.Close>
	</SheetPrimitive.Content>
</SheetPortal>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-description.svelte
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = SheetPrimitive.DescriptionProps;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<SheetPrimitive.Description
	class={cn("text-sm text-muted-foreground", className)}
	{...$$restProps}
>
	<slot />
</SheetPrimitive.Description>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-footer.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import type { HTMLAttributes } from "svelte/elements";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn(
		"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
		className
	)}
	{...$$restProps}
>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-header.svelte
<script lang="ts">
	import { cn } from "$lib/utils";
	import type { HTMLAttributes } from "svelte/elements";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
	{...$$restProps}
>
	<slot />
</div>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-overlay.svelte
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";
	import { fade } from "svelte/transition";

	type $$Props = SheetPrimitive.OverlayProps;

	let className: $$Props["class"] = undefined;
	export let transition: $$Props["transition"] = fade;
	export let transitionConfig: $$Props["transitionConfig"] = {
		duration: 150
	};
	export { className as class };
</script>

<SheetPrimitive.Overlay
	{transition}
	{transitionConfig}
	class={cn(
		"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm ",
		className
	)}
	{...$$restProps}
/>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-portal.svelte
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = SheetPrimitive.PortalProps;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<SheetPrimitive.Portal class={cn(className)} {...$$restProps}>
	<slot />
</SheetPrimitive.Portal>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/sheet/sheet-title.svelte
<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils";

	type $$Props = SheetPrimitive.TitleProps;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<SheetPrimitive.Title
	class={cn("text-lg font-semibold text-foreground", className)}
	{...$$restProps}
>
	<slot />
</SheetPrimitive.Title>


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/tooltip/index.ts
import { Tooltip as TooltipPrimitive } from "bits-ui";
import Content from "./tooltip-content.svelte";

const Root = TooltipPrimitive.Root;
const Trigger = TooltipPrimitive.Trigger;

export {
	Root,
	Trigger,
	Content,
	//
	Root as Tooltip,
	Content as TooltipContent,
	Trigger as TooltipTrigger
};


# File: also-a-sveltekit-chatbot-main/src/lib/components/ui/tooltip/tooltip-content.svelte
<script lang="ts">
	import { Tooltip as TooltipPrimitive } from "bits-ui";
	import { cn, flyAndScale } from "$lib/utils";

	type $$Props = TooltipPrimitive.ContentProps;

	let className: $$Props["class"] = undefined;
	export let sideOffset: $$Props["sideOffset"] = 4;
	export let transition: $$Props["transition"] = flyAndScale;
	export let transitionConfig: $$Props["transitionConfig"] = {
		y: 8,
		duration: 150
	};
	export { className as class };
</script>

<TooltipPrimitive.Content
	{transition}
	{transitionConfig}
	{sideOffset}
	class={cn(
		"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md",
		className
	)}
	{...$$restProps}
>
	<slot />
</TooltipPrimitive.Content>


# File: also-a-sveltekit-chatbot-main/src/lib/kv.ts
import { KV_REST_API_TOKEN, KV_REST_API_URL } from '$env/static/private';
import { createClient } from '@vercel/kv';

export const kv = createClient({
	url: KV_REST_API_URL,
	token: KV_REST_API_TOKEN,
	automaticDeserialization: false
});


# File: also-a-sveltekit-chatbot-main/src/lib/theme.ts
import { browser } from '$app/environment';
import { derived, writable } from 'svelte/store';

export type Theme = 'system' | 'light' | 'dark';

// TODO: Add a way to persist the theme in local storage
// TODO: Add a way to watch for system theme changes

export const theme = writable<Theme>('system');

export const resolvedTheme = derived(theme, ($theme) => {
	if ($theme === 'system') {
		if (!browser) return 'light';
		const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
			? 'dark'
			: 'light';
		return systemTheme === 'dark' ? 'dark' : 'light';
	}
	return $theme;
});


# File: also-a-sveltekit-chatbot-main/src/lib/types.ts
import type { Message } from 'ai';

export interface Chat extends Record<string, any> {
	id: string;
	title: string;
	createdAt: Date;
	userId: string;
	path: string;
	messages: Message[];
	sharePath?: string;
}


# File: also-a-sveltekit-chatbot-main/src/lib/utils.ts
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { cubicOut } from 'svelte/easing';
import type { TransitionConfig } from 'svelte/transition';
import { customAlphabet } from 'nanoid';

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

export const nanoid = customAlphabet(
	'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
	7
); // 7-character random string

export function formatDate(input: string | number | Date): string {
	const date = new Date(input);
	return date.toLocaleDateString('en-US', {
		month: 'long',
		day: 'numeric',
		year: 'numeric'
	});
}

type FlyAndScaleParams = {
	y?: number;
	x?: number;
	start?: number;
	duration?: number;
};

export const flyAndScale = (
	node: Element,
	params: FlyAndScaleParams = { y: -8, x: 0, start: 0.95, duration: 150 }
): TransitionConfig => {
	const style = getComputedStyle(node);
	const transform = style.transform === 'none' ? '' : style.transform;

	const scaleConversion = (valueA: number, scaleA: [number, number], scaleB: [number, number]) => {
		const [minA, maxA] = scaleA;
		const [minB, maxB] = scaleB;

		const percentage = (valueA - minA) / (maxA - minA);
		const valueB = percentage * (maxB - minB) + minB;

		return valueB;
	};

	const styleToString = (style: Record<string, number | string | undefined>): string => {
		return Object.keys(style).reduce((str, key) => {
			if (style[key] === undefined) return str;
			return str + `${key}:${style[key]};`;
		}, '');
	};

	return {
		duration: params.duration ?? 200,
		delay: 0,
		css: (t) => {
			const y = scaleConversion(t, [0, 1], [params.y ?? 5, 0]);
			const x = scaleConversion(t, [0, 1], [params.x ?? 0, 0]);
			const scale = scaleConversion(t, [0, 1], [params.start ?? 0.95, 1]);

			return styleToString({
				transform: `${transform} translate3d(${x}px, ${y}px, 0) scale(${scale})`,
				opacity: t
			});
		},
		easing: cubicOut
	};
};


# File: also-a-sveltekit-chatbot-main/src/routes/+layout.server.ts
import { getChats } from '$lib/chat';
import type { LayoutServerLoad } from './$types';

export const load: LayoutServerLoad = async (event) => {
	const session = await event.locals.getSession();
	const chats = getChats(session?.user.id);

	return {
		session,
		chats
	};
};


# File: also-a-sveltekit-chatbot-main/src/routes/+layout.svelte
<script lang="ts">
	import { browser } from '$app/environment';
	import Header from '$lib/components/Header.svelte';

	import { resolvedTheme } from '$lib/theme';
	import '@fontsource/inter';
	import '@fontsource/jetbrains-mono';
	import '../app.postcss';
	import type { LayoutServerData } from './$types';
	import { onDestroy } from 'svelte';

	export let data: LayoutServerData;
	const { chats } = data;

	onDestroy(
		resolvedTheme.subscribe((value) => {
			if (!browser) return;
			document.documentElement.classList.remove('light', 'dark');
			document.documentElement.classList.add(value);
		})
	);
</script>

<svelte:head>
	<title>SvelteKit AI Chatbot</title>
</svelte:head>

<Header {chats} />
<main class="flex flex-col flex-1 bg-muted/50">
	<slot />
</main>


# File: also-a-sveltekit-chatbot-main/src/routes/+page.svelte
<script lang="ts">
	import Chat from '$lib/components/Chat.svelte';
	import { nanoid } from '$lib/utils';

	const id = nanoid();
</script>

<Chat {id} />


# File: also-a-sveltekit-chatbot-main/src/routes/api/chat/+server.ts
import { kv } from '$lib/kv';
import { nanoid } from '$lib/utils';
import type { Config } from '@sveltejs/adapter-vercel';
import { OpenAIStream, StreamingTextResponse } from 'ai';
import { Configuration, OpenAIApi } from 'openai-edge';

import { env } from '$env/dynamic/private';
// You may want to replace the above with a static private env variable
// for dead-code elimination and build-time type-checking:
// import { OPENAI_API_KEY } from '$env/static/private'

import type { RequestHandler } from './$types';

export const config: Config = {
	runtime: 'edge'
};

export const POST = (async ({ request, locals: { getSession } }) => {
	const json = await request.json();
	const { messages, previewToken } = json;
	const session = await getSession();

	// Create an OpenAI API client
	const config = new Configuration({
		apiKey: previewToken || env.OPENAI_API_KEY
	});
	const openai = new OpenAIApi(config);

	// Ask OpenAI for a streaming chat completion given the prompt
	const response = await openai.createChatCompletion({
		model: 'gpt-3.5-turbo',
		messages,
		temperature: 0.7,
		stream: true
	});

	// Convert the response into a friendly text-stream
	const stream = OpenAIStream(response, {
		async onCompletion(completion) {
			const title = messages[0].content.substring(0, 100);
			const userId = session?.user?.id;
			if (userId) {
				const id = json.id ?? nanoid();
				const createdAt = Date.now();
				const path = `/chat/${id}`;
				const payload = {
					id,
					title,
					userId,
					createdAt,
					path,
					messages: [
						...messages,
						{
							content: completion,
							role: 'assistant'
						}
					]
				};
				await kv.hmset(`chat:${id}`, payload);
				await kv.zadd(`user:chat:${userId}`, {
					score: createdAt,
					member: `chat:${id}`
				});
			}
		}
	});

	// Respond with the stream
	return new StreamingTextResponse(stream);
}) satisfies RequestHandler;


# File: also-a-sveltekit-chatbot-main/src/routes/chat/[id]/+page.server.ts
import { error, redirect } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';
import { getChat } from '$lib/chat';

export const load: PageServerLoad = async ({ params, locals }) => {
	const session = await locals.getSession();
	if (!session?.user) {
		throw redirect(302, `/sign-in?redirect=/chat/${params.id}`);
	}

	const chat = await getChat(params.id, session.user.id);

	if (!chat) {
		throw error(404, 'Not found');
	}

	return { chat };
};


# File: also-a-sveltekit-chatbot-main/src/routes/chat/[id]/+page.svelte
<script lang="ts">
	import Chat from '$lib/components/Chat.svelte';
	import type { PageServerData } from './$types';

	export let data: PageServerData;
	const { chat } = data;
</script>

<Chat id={chat.id} initialMessages={chat.messages} />


# File: also-a-sveltekit-chatbot-main/src/routes/sign-in/+page.svelte
<script lang="ts">
	import LoginButton from '$lib/components/LoginButton.svelte';
</script>

<div class="flex h-[calc(100vh-theme(spacing.16))] items-center justify-center py-10">
	<LoginButton />
</div>


# File: also-a-sveltekit-chatbot-main/svelte.config.js
import preprocess from 'svelte-preprocess';
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/kit/vite';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://kit.svelte.dev/docs/integrations#preprocessors
	// for more information about preprocessors
	preprocess: [
		vitePreprocess(),
		preprocess({
			postcss: true
		})
	],

	kit: {
		// adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
		// If your environment is not supported or you settled on a specific environment, switch out the adapter.
		// See https://kit.svelte.dev/docs/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;


# File: also-a-sveltekit-chatbot-main/tailwind.config.js
import { fontFamily } from "tailwindcss/defaultTheme";

/** @type {import('tailwindcss').Config} */
const config = {
	darkMode: ["class"],
	content: ["./src/**/*.{html,js,svelte,ts}"],
	theme: {
		container: {
			center: true,
			padding: "2rem",
			screens: {
				"2xl": "1400px"
			}
		},
		extend: {
			colors: {
				border: "hsl(var(--border))",
				input: "hsl(var(--input))",
				ring: "hsl(var(--ring))",
				background: "hsl(var(--background))",
				foreground: "hsl(var(--foreground))",
				primary: {
					DEFAULT: "hsl(var(--primary))",
					foreground: "hsl(var(--primary-foreground))"
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary))",
					foreground: "hsl(var(--secondary-foreground))"
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive))",
					foreground: "hsl(var(--destructive-foreground))"
				},
				muted: {
					DEFAULT: "hsl(var(--muted))",
					foreground: "hsl(var(--muted-foreground))"
				},
				accent: {
					DEFAULT: "hsl(var(--accent))",
					foreground: "hsl(var(--accent-foreground))"
				},
				popover: {
					DEFAULT: "hsl(var(--popover))",
					foreground: "hsl(var(--popover-foreground))"
				},
				card: {
					DEFAULT: "hsl(var(--card))",
					foreground: "hsl(var(--card-foreground))"
				}
			},
			borderRadius: {
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)"
			},
			fontFamily: {
				sans: [...fontFamily.sans]
			}
		}
	},
};

export default config;


# File: also-a-sveltekit-chatbot-main/vite.config.ts
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit()]
});


